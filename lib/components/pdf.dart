import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pdf/pdf.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:smartdalala/components/add.dart';
import 'model.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

 Future<void> generatePdf(PdfPageFormat format, String title,Autogenerated data,contextBui) async {
    final pdf = pw.Document();

    // final font = await PdfGoogleFonts.nunitoExtraLight();
try{
    pdf.addPage(
      pw.MultiPage(
        // pageFormat: PdfPageFormat.a,
        // orientation: ,
        

        build: (context) {
          return[   
              printDoc(data,contextBui,title),
              buildPDFTable(data,contextBui),
          ];
        },
      ),
    );
}catch(e){
    print("error"+e.toString());
}
  
     Printing.layoutPdf(onLayout: (PdfPageFormat format) async=> pdf.save() );

     
      // pdf.save();
  }



 printDoc( Autogenerated data,context,title){
    return pw.Column(
      mainAxisAlignment: pw.MainAxisAlignment.center,
      crossAxisAlignment: pw.CrossAxisAlignment.center,
      children: [
            Header(),
            pw.SizedBox(height: 10,),
            // TextStyleD(title,Colors.red,15.0),
            pw.SizedBox(height: 10,),
          // pw.Container(
          //     // margin: pw.EdgeInsets.symmetric(vertical: 10,horizontal: 10),
          //     width: MediaQuery.of(context).size.width,
          //     height: MediaQuery.of(context).size.height,
          //      child: buildPDFTable(data)
          //  ),
    ]);
 }

pw.Widget buildPDFTable(data,context) {
  final pdfContainers = <pw.Widget>[];
  // Divide the data into chunks of 7
  for (var i = 0; i < data.items!.length; i += 7) {
    final chunk = data.items!.sublist(i, i + 7 > data.items!.length ? data.items!.length : i + 7);
    Autogenerated obj=new Autogenerated();
    obj.items=chunk;
    pdfContainers.add(
      pw.Container(
        width: MediaQuery.of(context).size.width,
       height: MediaQuery.of(context).size.height,
        margin: pw.EdgeInsets.symmetric(vertical: 10, horizontal: 10),
        // width: double.infinity, // Use double.infinity to take full width
        child: tableContent(obj), // Call tableContent with the chunk
      ),
    );
  }

  return pw.Column(
    children: pdfContainers,
  );
}


  pw.Widget Header() {
       
       return  pw.Column(
        children:[
            TextStyleD("BALAJI VASAVI CORPORATIONS",Colors.red,15.0),
            TextStyleD("rice & broken rice canvassing agent",Colors.black,13.0),
            pw.SizedBox(height: 5,),
            TextStyleD("D.No 7-2-47 , Goushala Bhavan,Near railway Gate,",Colors.black,10.0),
            pw.SizedBox(height: 5,),
            TextStyleD("NIZAMABAD - 503001 (T.S)",Colors.black,10.0), 
        ]
       );
  }


   pw.Widget TextStyleD(text,Color color,size){
      return  pw.Text(text,style: pw.TextStyle(
                              fontSize: size+4,
                              // color:,
                              fontWeight: pw.FontWeight.bold,
                              decoration: pw.TextDecoration.none,
                           ),
                          
                );
  }
 
 
 tableContent(Autogenerated data) {
  return pw.Table.fromTextArray(
    
    headers: [
      'DATE',
      'RICE MILL',
      // 'PARTY',
      // 'LORRY NO',
      "Order List"
    ],
    data: data.items!.map<List<dynamic>>(( item) {
      return [         // Replace icon with check or cross mark
        item.dateobj.toString().substring(0,5).toString(),         // Date
        item.ricemill.toString(),        // Rice Mill Name
        // item.party.toString(),        // Rice Mill Name
        // item.lorry.toString(),
        _buildNestedDetailsTable(item.bill!)  
      ];
    }).toList(),  // Ensure the data is a List<List<dynamic>>
    
    border: pw.TableBorder.all(
      color: PdfColors.black,
      width: 3,
    ),
    cellStyle: pw.TextStyle(
      fontSize: 15,
    ),
    headerStyle: pw.TextStyle(
      fontWeight: pw.FontWeight.bold,
      fontSize: 17,
      color: PdfColors.black,
    ),
    headerDecoration: pw.BoxDecoration(
      color: PdfColors.greenAccent,
    ),
    
    columnWidths: {

    },
  );
}


pw.Widget _buildNestedDetailsTable(List<Bill> details) {
  double totalAmount=0;
  List<List<String>> data = details.map<List<String>>((detail) {
       double total= ( (double.parse(detail.bags.toString()) * double.parse(detail.rate.toString())* double.parse(detail.kg.toString())) / 100 ).toDouble();
       double q= ( (double.parse(detail.bags.toString()) * double.parse(detail.kg.toString())) / 100 ).toDouble();
       totalAmount += total;
      return [
        detail.rice.toString(),
        q.toString(),
        // detail.kg.toString(),
        detail.rate.toString(),
        total.toString()
      
      ];
    }).toList();

   data.add(["", "", "", totalAmount.toString()]);
  
  return pw.Table.fromTextArray(
    headers: [
      'Rice',    // Define nested table headers
      'Quan',    // Define nested table headers
      // 'Kg',
      'Rate',
      'Total'
    ],
    data: data,
    
    border: pw.TableBorder.all(
      color: PdfColors.grey,
      width: 1,
    ),
    cellStyle: pw.TextStyle(fontSize: 12),
    headerStyle: pw.TextStyle(
      fontWeight: pw.FontWeight.bold,
      fontSize: 12,
      color: PdfColors.black,
    ),
    headerDecoration: pw.BoxDecoration(
      color: PdfColors.grey300,
    ),
  );
}
