import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:smartdalala/components/add.dart';
import 'package:smartdalala/components/menu.dart';
import 'package:smartdalala/components/table.dart';

import 'model.dart';


class DateList extends StatefulWidget {
  const DateList({ Key? key }) : super(key: key);

  @override
  _DisplayState createState() => _DisplayState();
}

class _DisplayState extends State<DateList> {

 late Autogenerated data;
 late Autogenerated datatemp;
 bool flag=true;
 TextEditingController DateObj=new TextEditingController(text:DateFormat('d/MM/yyyy').format(DateTime.now()).toString() );


  void getdata()async{
          final SharedPreferences Detailsuser = await SharedPreferences.getInstance();
          final String id = Detailsuser.getString('id').toString();
         var url='${path}/admin/display/'+userid;
          // var url='https://corporations-production.up.railway.app/admin/display/'+id;
          final response = await http.get(Uri.parse(url));
          if (response.statusCode == 200) {
              setState(() {
               data = Autogenerated.fromJson(jsonDecode(response.body));
               flag=false;
               datatemp=Autogenerated.fromJson(jsonDecode(response.body));
              });
             
          } else {
            throw Exception('Failed to load album');
          }
  }

 @override
  void initState() {
    getdata();
    super.initState();
  }


  Future<void> _showAlertDialog( List<Bill>? bill) async {
 
  if(bill==null)return;



  return showDialog<void>(
    context: context,
    barrierDismissible: false, // user must tap button!
    builder: (BuildContext context) {
      return AlertDialog( // <-- SEE HERE
        title: const Text('Order Details'),
        content: SingleChildScrollView(
          child: Column(
            children:  <Widget>[
                  
                
              
                   SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                     child:SingleChildScrollView(
                        child:  DataTable(
                  columns:const [
                    // DataColumn(label: Text('Sno'),),
                    DataColumn(label: Text('Rice Name'),),
                    DataColumn(label: Text('Bags'),),
                    DataColumn(label: Text('Kgs'),),
                    DataColumn(label: Text('Rate'),),
                
                  ],
                  rows: 
                        bill.map((item) =>
                          // we return a DataRow every time
                          DataRow(
                              // List<DataCell> cells is required in every row
                              cells: [
                             
                                DataCell(Text(item.rice.toString())),
                                DataCell(Text(item.bags.toString())),
                                DataCell(Text(item.kg.toString())),
                                DataCell(Text(item.rate.toString())),
                                
                              
                              ]))
                      .toList(),
                ),
                     ),
                 ),
           
           ]  ), 
         ),
          

          
        actions: <Widget>[
          TextButton(
            child: const Text('Ok'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      );
    },
  );
}


void onchangeDate(){
     
      List<Items> list=[];

      list=originalData.items!.where((item) =>item.dateobj.toString().contains(DateObj.text)).toList();
  
     searchData.items=list;
     f.value=!f.value;

}


Widget InputDate(lableText,keyBoard,Textcontroller,icons){

    return Center(
        child: Container(
          padding: EdgeInsets.symmetric(vertical: 10),
          width: MediaQuery.of(context).size.width/1.1,
          child: TextFormField(
               keyboardType: keyBoard,
                controller: DateObj,
              onChanged: (value) {
                  onchangeDate();
              },
              decoration: InputDecoration(
                labelText: lableText,
                
                border: OutlineInputBorder(),
                suffixIcon:IconButton( onPressed: ()async{
                      DateTime? dateTime=await showDatePicker(context: context, initialDate: DateTime.now(),
                       firstDate: DateTime(2021), lastDate: DateTime(2025));
                       setState(() {
                           if(dateTime!=null){
                               String str=new DateFormat("dd/MM/yyyy").format(dateTime);
                               DateObj.text=str;
                               onchangeDate();
                           }

                       });
                },icon:Icon( Icons.date_range_outlined)),
              ),
            ),
        ),
      );


  }


  @override
  Widget build(BuildContext context) {
   


    return Scaffold(
      appBar: AppBar(
               backgroundColor: Colors.orange,
               title:const Center(child: Text("Date",style: TextStyle(
                     color: Colors.black,
                     fontSize: 25,
                     fontWeight: FontWeight.bold
               ),)),
      ),
      body: Container(
                 child: flag? Center(child: CircularProgressIndicator(color: Colors.red,),):SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                     child:SingleChildScrollView(
                        child:  Column(
                           mainAxisAlignment: MainAxisAlignment.start,
                           crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                      Padding(
                        padding: const EdgeInsets.only(left:18.0),
                        child: InputDate("Date",TextInputType.datetime,DateObj,Icons.data_exploration),
                      ),

                      //  Padding(
                      //     padding: const EdgeInsets.symmetric(vertical:15.0,horizontal: 20),
                      //     child: Card(
                      //       child: Container(
                      //         width: MediaQuery.of(context).size.width/1.1,
                      //         color: Colors.red,
                      //         child: InkWell(
                      //             onTap:(){
                                       
                      //             },
                      //             child:const Text("Fetch Data",
                      //             style: TextStyle(
                      //                                 fontSize: 30,
                      //                                 fontWeight: FontWeight.bold,
                      //                                 color: Colors.white
                      //                             ),
                      //                               textAlign: TextAlign.center,),
                      //         ),
                      //       ),
                      //     ),
                      //   ),  
               
                            SizedBox(height: 30,),
                            TableDisplay(data: "",),
                            SizedBox(height: 30,),
                //             DataTable(
                //   columns:const [
                //     // DataColumn(label: Text('Sno'),),
                //     DataColumn(label: Text('Verified'),),
                //     DataColumn(label: Text('Date'),),
                //     DataColumn(label: Text('Ricemill Name'),),
                //     DataColumn(label: Text('Party Name'),),
                //     DataColumn(label: Text('Place'),),
                //     DataColumn(label: Text('Lorry No'),),
                //     DataColumn(label: Text('Order Details'),),
                //   ],
                //   rows: 
                //      data.items!.map((item) =>
                //               // we return a DataRow every time
                //               DataRow(
                //                   // List<DataCell> cells is required in every row
                //                   cells: [
                //                   //  DataCell(Text(item.dateobj.toString())),
                //                    const DataCell((true)
                //                         ? Icon(
                //                             Icons.verified_user,
                //                             color: Colors.green,
                //                           )
                //                         : Icon(Icons.cancel, color: Colors.red)),
                //                     // I want to display a green color icon when user is verified and red when unverified
                //                     DataCell(Text(item.dateobj.toString())),
                //                     DataCell(Text(item.ricemill.toString())),
                //                     DataCell(Text(item.party.toString())),
                //                     DataCell(Text(item.district.toString())),
                //                     DataCell(Text(item.lorry.toString())),
                //                     DataCell(InkWell(
                //                       onTap: (){
                //                            _showAlertDialog(item.bill);
                //                           // Bill? bill=item.bill;
                //                           // print(bill!.rice);
                //                       },
                //                       child: Icon(Icons.arrow_forward_ios,color: Colors.green,))
                //                      ),
                //                   ]))
                //       .toList(),
                // ),
                          ],
                        ),
                     ),
                 ),
             ),
    );
  }
}
